{"version":3,"sources":["components/Chat.js","components/Join.js","components/InfoBar.js","components/Input.js","components/MessageLine.js","components/ChatLog.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["socket","Join","useState","name","setName","room","setRoom","className","placeholder","type","onChange","event","target","value","onClick","preventDefault","to","InfoBar","href","Input","message","setMessage","sendMessage","onKeyPress","key","MessageLine","user","text","ChatLog","messageLog","map","i","Chat","location","messagelog","setMessagelog","useEffect","queryString","parse","search","io","emit","off","on","console","log","App","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.26d72488.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport queryString from 'query-string';\r\nimport io from 'socket.io-client';\r\nimport InfoBar from './InfoBar'\r\nimport Input from './Input'\r\nimport ChatLog from './ChatLog.js'\r\n\r\nimport '../style.css';\r\nlet socket; \r\n\r\nconst Chat = ({location}) =>{\r\n    \r\n    const[name,setName] = useState('');\r\n    const[room,setRoom] = useState('');\r\n    const[message,setMessage] = useState('');\r\n    const[messagelog,setMessagelog] = useState([]);\r\n    const ENDPOINT ='localhost:5000'\r\n    useEffect(()=>{\r\n        const {name,room} = queryString.parse(location.search)\r\n\r\n        socket = io(ENDPOINT)\r\n\r\n        setName(name);\r\n        setRoom(room);\r\n        \r\n        socket.emit('join', {name,room},()=>{\r\n\r\n        });\r\n\r\n        return ()=>{\r\n            socket.emit('disconnect');\r\n            socket.off();\r\n        }\r\n\r\n    },[ENDPOINT,location.search]);\r\n\r\n    useEffect(()=>{\r\n        socket.on('message',(message)=>{\r\n            setMessagelog([...messagelog, message]);\r\n        })\r\n    },[messagelog]);\r\n    \r\n    const sendMessage = (event) =>{\r\n        event.preventDefault();\r\n        if(message){\r\n            socket.emit('sendMessage', message, ()=> setMessage(''));\r\n        }\r\n    }\r\n\r\n    console.log(message, messagelog)\r\n    return(\r\n        <div className=\"outerContainer\">\r\n            <div className=\"container\">\r\n                <InfoBar room={room}/>\r\n                <ChatLog messageLog={messagelog} name={name}/>\r\n                <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\r\n                \r\n            </div>\r\n        </div>\r\n        /*\r\n        <div className=\"outerContainer\">\r\n            <div className=\"container\">\r\n                <input value={message} onChange={(event) => setMessage(event.target.value)} onKeyPress={event => event.key === 'Enter'? sendMessage(event):null}/>\r\n            </div>\r\n        </div>\r\n        */\r\n    )\r\n}\r\n\r\nexport default Chat;","import React,{useState} from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nimport '../style.css';\r\nconst Join = () =>{\r\n    const[name,setName] = useState('');\r\n    const[room,setRoom] = useState('');\r\n\r\n    return(\r\n        <div className=\"joinOuterContainer\">\r\n            <div className=\"joinInnerContainer\">\r\n                <div><input placeholder =\"Username\" className=\"joinInput\" type=\"text\" onChange={(event)=>setName(event.target.value)}></input></div>\r\n                <div><input placeholder =\"Room name\" className=\"joinInput\" type=\"text\" onChange={(event)=>setRoom(event.target.value)}></input></div>\r\n                <Link onClick={event =>(!name || !room) ? event.preventDefault():null} to={`/chat?name=${name}&room=${room}`}>\r\n                    <button className=\"button\" type=\"submit\">sign in</button>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Join;","import React from 'react';\r\n\r\nimport '../style.css';\r\nconst InfoBar = ({room}) =>(\r\n    <div className=\"infoBar\">\r\n        <div className=\"leftInnderContainer\">\r\n            <h1>{room}</h1>\r\n        </div>\r\n        <div className=\"rightInnderContainer\">\r\n            <a href=\"/\">close</a>\r\n        </div>\r\n\r\n    </div>\r\n)\r\n\r\nexport default InfoBar;","import React from 'react';\r\n\r\nimport '../style.css';\r\nconst Input = ({message,setMessage,sendMessage}) =>(\r\n    <form className=\"form\">\r\n        <input className=\"input\" type=\"text\" placeholder=\"Enter message\" value={message} onChange={(event) => setMessage(event.target.value)} onKeyPress={event => event.key === 'Enter'? sendMessage(event):null}></input>\r\n        <button className=\"sendButton\" onClick={(event) => sendMessage(event)}>send</button>\r\n    </form>\r\n)\r\n\r\nexport default Input;","import React from 'react';\r\n\r\n\r\nimport '../style.css';\r\n\r\nconst MessageLine = ({message:{user , text},name}) =>{\r\n  return(\r\n      <div className=\"messageContainer\">\r\n        <h5>{user}</h5>\r\n        <p>{text}</p>\r\n      </div>\r\n  )\r\n}\r\n\r\n\r\nexport default MessageLine;","import React from 'react';\r\nimport MessageLine from './MessageLine'\r\nimport ScrollToBottom from 'react-scroll-to-bottom'\r\n\r\nimport '../style.css';\r\n\r\nconst ChatLog = ({messageLog, name}) =>(\r\n    <ScrollToBottom>\r\n        {messageLog.map((message,i) => <div key={i}><MessageLine message={message} name={name}/></div>)}\r\n    </ScrollToBottom>\r\n)\r\n\r\nexport default ChatLog;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport{BrowserRouter as Router, Route} from 'react-router-dom';\r\n\r\nimport Join from'./components/Join'\r\nimport Chat from'./components/Chat'\r\nconst App =()=>(\r\n  <Router>\r\n    <Route path =\"/\" exact component={Join}/>\r\n    <Route path =\"/chat\" component={Chat}/>\r\n  </Router>\r\n)\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}